-- Question 1 - Display the title and combined genres for all books and sort the titles alphabetically.
SELECT title, string_agg(genre, ',') FROM (Books NATURAL JOIN Genre) GROUP BY title ORDER BY title ASC;

--Question 2 - Rank the top 5 of the all time most popular books in the ‘RomCom’ genre based on the amount of times they’ve been borrowed.

SELECT * FROM (SELECT title, RANK() OVER (ORDER BY COUNT(bookID) DESC) AS rank 
FROM Books NATURAL JOIN(SELECT bookID FROM Genre NATURAL JOIN (SELECT bookID FROM (Borrowing NATURAL JOIN Resources)) AS first 
WHERE genre = 'RomCom') AS second GROUP BY title) AS a WHERE a.rank < 6; 

--Question 3 - Present a weekly report from week 1 to 30 on how many books were borrowed, returned and late.

SELECT * FROM (SELECT date_part('week', DoB) AS week, COUNT(physicalID) AS borrowed FROM Borrowing GROUP BY week) AS allBorrowed 
    NATURAL JOIN (SELECT date_part('week', DoR) AS week, COUNT(physicalID) AS returned FROM Borrowing GROUP BY week) AS allReturned
    NATURAL JOIN (SELECT date_part('week', DoR) AS week, COUNT(physicalID) AS late FROM Borrowing WHERE DoR > DoE GROUP BY week) AS allLate
    WHERE week < 31 ORDER BY week ASC;

--Question 4 - title, true false prequel list, month of feb 
SELECT title, CASE WHEN prequelID IS NULL THEN 'f' ELSE 't' END AS hasPrequel, dob
FROM Prequels RIGHT JOIN (SELECT title, bookID,dob FROM Books NATURAL JOIN(SELECT bookID, dob FROM Borrowing NATURAL JOIN resources WHERE date_part('month', dob) = 2 )  AS first1) 
AS sec ON Prequels.bookID = sec.bookID GROUP BY title, prequelID, dob ORDER BY title ASC; 

--Question 5 - present a list of the titles of each book in the Harry Potter Series
WITH recursive findPrequels(bookID, prequelID) AS (
  SELECT bookID,prequelID FROM Prequels WHERE bookID = 8713 
  UNION ALL
  SELECT setOfBooks.bookID, setOfBooks.prequelID 
  FROM findPrequels JOIN(SELECT Books.bookID, Prequels.prequelID FROM Books LEFT JOIN Prequels ON Books.bookID = Prequels.BookID ) as setOfBooks 
  ON setOfBooks.bookID = findPrequels.prequelID  -- find a prequel to this book. 
)
SELECT title, bookID, prequelID FROM findPrequels NATURAL JOIN Books;

--P+ - present the name and sum of all pages of each book in all series in order
WITH recursive findPrequels(bookID, prequelID, pages, title, orderOfBooks, seriesID) AS (
  SELECT bookID,prequelID, pages, title,1,bookID FROM Books NATURAL JOIN Prequels
  WHERE NOT EXISTS (SELECT * FROM prequels WHERE prequels.prequelid = books.bookID) -- THe last book in a series should not be a prequel to another book
  UNION ALL
  SELECT setOfBooks.bookID, setOfBooks.prequelID, setOfBooks.pages, setOfBooks.title, orderOfBooks+1, seriesID 
  FROM findPrequels JOIN(SELECT Books.bookID, Prequels.prequelID, Books.pages, Books.title FROM Books LEFT JOIN Prequels ON Books.bookID = Prequels.BookID ) as setOfBooks 
  ON setOfBooks.bookID = findPrequels.prequelID 
)
select string_agg(findPrequels.title, ' -> ' order by orderOfBooks DESC) AS Series
     , sum(findPrequels.pages) AS pages from findPrequels GROUP BY seriesID;


WITH recursive findRiver(name, river, length, orderOfRivers, seriesID) AS (
  SELECT name,river, length,1,name FROM River
  UNION ALL 
  SELECT nextRiver.name,nextRiver.river,nextRiver.length,orderOfRivers+1,seriesID 
  FROM findRiver JOIN(SELECT river.name,river.river,river.length FROM River) as nextRiver 
  ON nextRiver.name = findRiver.river 
)
Select RANK() OVER (ORDER BY COUNT(orderOfRivers) DESC) AS rank, string_agg(findRiver.name, ' -> ' order by orderOfRivers DESC)  AS path, COUNT(orderOfRivers) AS numrivers
     ,sum(findRiver.length) AS totlength from findRiver GROUP BY seriesID order by rank ASC, totlength DESC;

---
WITH recursive findRiver(name, river, length, orderOfRivers, seriesID) AS (
  SELECT name,river, length,1,name FROM River
  UNION ALL 
  SELECT nextRiver.name,nextRiver.river,nextRiver.length,orderOfRivers+1,seriesID 
  FROM findRiver JOIN(SELECT river.name,river.river,river.length FROM River) as nextRiver 
  ON nextRiver.name = findRiver.river 
)
SELECT * FROM(SELECT * FROM (Select RANK() OVER (ORDER BY COUNT(orderOfRivers) DESC) AS rank, string_agg(findRiver.name, ' -> ' order by orderOfRivers DESC)  AS path, COUNT(orderOfRivers) AS numrivers
     ,sum(findRiver.length) AS totlength from findRiver GROUP BY seriesID order by rank ASC, totlength DESC) q WHERE path LIKE'Nile%' OR path LIKE 'Amazonas%' 
     OR path LIKE 'Jangste%' OR path LIKE 'Rhein%' OR path LIKE 'Donau%' OR path LIKE 'Mississippi%') as ali HAVING max(numrivers); 
