CREATE TABLE Book(
    isbn varchar(255) PRIMARY KEY,
    title varchar(255) NOT NULL,
    edition int,
    book_language varchar(255),
    publisher varchar(255),
    date_of_publication date
);
CREATE TABLE PhysicalBook(
    physical_ID int PRIMARY KEY,
    isbn varchar(255),
    damage boolean,
    CONSTRAINT fk_physicalBook_isbn FOREIGN KEY (isbn) REFERENCES Book(isbn)
);
CREATE TABLE Author(
    author_ID int PRIMARY KEY,
    author_name varchar(255)
);
CREATE TABLE BookAuthors(
    author_ID int,
    isbn varchar(255),
    PRIMARY KEY (author_ID,isbn),
    CONSTRAINT fk_author_authorID FOREIGN KEY (author_ID) REFERENCES Author(author_ID),
    CONSTRAINT fk_bookAuthors_isbn FOREIGN KEY (isbn) REFERENCES Book(isbn)
);
CREATE TABLE BookGenres(
    isbn varchar(255),
    genre varchar(255),
    PRIMARY KEY(isbn,genre),
    CONSTRAINT fk_bookGenre_isbn FOREIGN KEY (isbn) REFERENCES Book(isbn)
);

CREATE TABLE BookPrequels(
    isbn varchar(255),
    prequel_ID varchar(255),
    PRIMARY KEY(isbn,prequel_ID),
    CONSTRAINT fk_bookPrequels_isbn FOREIGN KEY (isbn) REFERENCES Book(isbn)
);
CREATE TABLE Users(
    user_ID int PRIMARY KEY,
    full_name varchar(255) NOT NULL,
    email varchar(255) NOT NULL,
    address varchar(255) NOT NULL
);
CREATE TABLE Loan(
    borrowing_ID int PRIMARY KEY,
    physical_ID int,
    user_ID int,
    date_of_borrowing date,
    due_date date,    
    date_of_return date,
    CONSTRAINT fk_loan_physical FOREIGN KEY (physical_ID) REFERENCES PhysicalBook(physical_ID),
    CONSTRAINT fk_loan_user FOREIGN KEY (user_ID) REFERENCES Users(user_ID)
);

CREATE TABLE Fines(
    borrowing_ID int PRIMARY KEY,
    fine_amount int NOT NULL,
    CONSTRAINT fk_fines_borrowing_ID FOREIGN KEY (borrowing_ID) REFERENCES Loan(borrowing_ID)
);

CREATE TABLE Student(
    user_ID int,
    programme varchar(255) NOT NULL,
    CONSTRAINT fk_student_userID FOREIGN KEY (user_ID) REFERENCES Users(user_ID)
);

CREATE TABLE Administrator( 
    user_ID int,
    phone_number varchar(255) NOT NULL,
    department varchar(255) NOT NULL,
    CONSTRAINT fk_admin_userID FOREIGN KEY (user_ID) REFERENCES Users(user_ID)
);

CREATE TABLE Transaction(
    transaction_ID int PRIMARY KEY,
    borrowing_ID int,
    amount int NOT NULL,
    data_of_payment date NOT NULL,
    payment_method varchar(255) NOT NULL,
    CONSTRAINT fk_transaction_borrowing FOREIGN KEY (borrowing_ID) REFERENCES Fines(borrowing_ID)
);

INSERT INTO Book VALUES ('9780439708180','Harry Potter and the Sorcerer''s Stone', 1, 'English', 'Scholastic','2015-12-08');
INSERT INTO Book VALUES ('9780439064873','Harry Potter and the Chamber of Secrets', 2, 'English', 'Scholastic','2001-09-01');
INSERT INTO Book VALUES ('9780439136358','Harry Potter and the Prisoner of Azkaban', 1, 'English', 'Scholastic','1999-10-01');
INSERT INTO Book VALUES ('9780439139595','Harry Potter and the Goblet of Fire', 1, 'English', 'Scholastic','2000-08-01');
INSERT INTO Book VALUES ('9780439358071','Harry Potter and the Order of the Phoenix', 1, 'English', 'Scholastic','2004-09-01');
INSERT INTO Book VALUES ('9780439784542','Harry Potter and the Half-blood Prince', 1, 'English', 'Arthur A. Levine Books','2005-08-01');
INSERT INTO Book VALUES ('9780545010221','Harry Potter and the Deathly Hallows', 1, 'English', 'Arthur A. Levine Books','2007-08-01');
INSERT INTO Book VALUES ('9781501182099','IT', 3, 'English', 'Scribner','2017-04-16');
INSERT INTO Book VALUES ('9780060935467','To Kill a Mockingbird ', 1, 'English', 'Harper Perennial','2002-01-01');
INSERT INTO Book VALUES ('9780064471107','The Magicians Nephew', 1, 'English', 'Harper Collins','2008-10-29');
INSERT INTO Book VALUES ('9781784703936','Homo Deus', 1, 'English', 'Vintage','2017-03-23');
INSERT INTO Book VALUES ('9781473637498','Factfulness: ten reasons we''re wrong about the world - and why things are better than you think', 1, 'English', 'Hachette Collections','2019-04-30');
INSERT INTO Book VALUES ('9780008471293','The Lord of the Rings', 1, 'English', 'Harper Collins','2021-10-19');
INSERT INTO Book VALUES ('9781529034523','The Hitchhiker''s Guide to the Galaxy', 1, 'English', 'Harper Collins','2008-10-29');
INSERT INTO Book VALUES ('9789129688306','Mio, min Mio', 14, 'Svenska', 'Rabén & Sjögren','2013-9-26');
INSERT INTO Book VALUES ('9789163875304','Cirkusmysteriet', 1, 'Svenska', 'Bonnier Carlsen','2013-09-30');

INSERT INTO Author VALUES (1, 'J.K. Rowling');
INSERT INTO Author VALUES (2, 'Stephen King');
INSERT INTO Author VALUES (3, 'Harper Lee');
INSERT INTO Author VALUES (4, 'C. S. Lewis');
INSERT INTO Author VALUES (5, 'Yuval Noah Harari');
INSERT INTO Author VALUES (6, 'Hans Rosling');
INSERT INTO Author VALUES (7, 'J.R.R. Tolkien');
INSERT INTO Author VALUES (8, 'Douglas Adams');
INSERT INTO Author VALUES (9, 'Astrid Lindgren');
INSERT INTO Author VALUES (10, 'Martin Widmark');
INSERT INTO Author VALUES (11, 'Helena Willis');

INSERT INTO BookAuthors VALUES (1, '9780439708180');
INSERT INTO BookAuthors VALUES (1, '9780439064873');
INSERT INTO BookAuthors VALUES (1, '9780439136358');
INSERT INTO BookAuthors VALUES (1, '9780439139595');
INSERT INTO BookAuthors VALUES (1, '9780439358071');
INSERT INTO BookAuthors VALUES (1, '9780439784542');
INSERT INTO BookAuthors VALUES (1, '9780545010221');
INSERT INTO BookAuthors VALUES (2, '9781501182099');
INSERT INTO BookAuthors VALUES (3, '9780060935467');
INSERT INTO BookAuthors VALUES (4, '9780064471107');
INSERT INTO BookAuthors VALUES (5, '9781784703936');
INSERT INTO BookAuthors VALUES (6, '9781473637498');
INSERT INTO BookAuthors VALUES (7, '9780008471293');
INSERT INTO BookAuthors VALUES (8, '9781529034523');
INSERT INTO BookAuthors VALUES (9, '9789129688306');
INSERT INTO BookAuthors VALUES (10, '9789163875304');
INSERT INTO BookAuthors VALUES (11, '9789163875304');

INSERT INTO BookGenres VALUES ('9780439708180', 'Fantasy');
INSERT INTO BookGenres VALUES ('9780439064873', 'Fantasy');
INSERT INTO BookGenres VALUES ('9780439136358', 'Fantasy');
INSERT INTO BookGenres VALUES ('9780439139595', 'Fantasy');
INSERT INTO BookGenres VALUES ('9780439358071', 'Fantasy');
INSERT INTO BookGenres VALUES ('9780439784542', 'Fantasy');
INSERT INTO BookGenres VALUES ('9780545010221', 'Fantasy');
INSERT INTO BookGenres VALUES ('9781501182099', 'Horror');

INSERT INTO BookGenres VALUES ('9781501182099', 'Fantasy');

INSERT INTO BookGenres VALUES ('9780060935467', 'Southern Gothic');
INSERT INTO BookGenres VALUES ('9780064471107', 'Fantasy');
INSERT INTO BookGenres VALUES ('9781784703936', 'Philosophy');
INSERT INTO BookGenres VALUES ('9781473637498', 'Non-Fiction');
INSERT INTO BookGenres VALUES ('9780008471293', 'Fantasy');
INSERT INTO BookGenres VALUES ('9781529034523', 'Science fiction');
INSERT INTO BookGenres VALUES ('9789129688306', 'Fantasy');
INSERT INTO BookGenres VALUES ('9789163875304', 'Childrens');

-- Harry potter prequels
INSERT INTO BookPrequels VALUES ('9780439064873', '9780439708180'); -- Book 2

INSERT INTO BookPrequels VALUES ('9780439136358', '9780439708180');  -- Book 3 
INSERT INTO BookPrequels VALUES ('9780439136358', '9780439064873');

INSERT INTO BookPrequels VALUES ('9780439139595', '9780439708180');  -- Book 4
INSERT INTO BookPrequels VALUES ('9780439139595', '9780439064873'); 
INSERT INTO BookPrequels VALUES ('9780439139595', '9780439136358'); 

INSERT INTO BookPrequels VALUES ('9780439358071', '9780439708180');  -- Book 5    
INSERT INTO BookPrequels VALUES ('9780439358071', '9780439064873');     
INSERT INTO BookPrequels VALUES ('9780439358071', '9780439136358');    
INSERT INTO BookPrequels VALUES ('9780439358071', '9780439139595');      

INSERT INTO BookPrequels VALUES ('9780439784542', '9780439708180'); -- Book 6
INSERT INTO BookPrequels VALUES ('9780439784542', '9780439064873');
INSERT INTO BookPrequels VALUES ('9780439784542', '9780439136358');
INSERT INTO BookPrequels VALUES ('9780439784542', '9780439139595');
INSERT INTO BookPrequels VALUES ('9780439784542', '9780439358071');

INSERT INTO BookPrequels VALUES ('9780545010221','9780439708180');  -- Book 7
INSERT INTO BookPrequels VALUES ('9780545010221','9780439064873');
INSERT INTO BookPrequels VALUES ('9780545010221','9780439136358');
INSERT INTO BookPrequels VALUES ('9780545010221','9780439139595');
INSERT INTO BookPrequels VALUES ('9780545010221','9780439358071');
INSERT INTO BookPrequels VALUES ('9780545010221','9780439784542');


INSERT INTO PhysicalBook VALUES (1, '9780439708180',false); -- HP1
INSERT INTO PhysicalBook VALUES (2, '9780439708180',false);
INSERT INTO PhysicalBook VALUES (3, '9780439708180',false);
INSERT INTO PhysicalBook VALUES (4, '9780439064873',true);  -- HP2
INSERT INTO PhysicalBook VALUES (5, '9780439136358',false); -- HP3
INSERT INTO PhysicalBook VALUES (6, '9780439139595',false); -- HP4
INSERT INTO PhysicalBook VALUES (7, '9780439358071',false); -- HP5
INSERT INTO PhysicalBook VALUES (8, '9780439358071',false);
INSERT INTO PhysicalBook VALUES (9, '9781501182099',false); -- IT
INSERT INTO PhysicalBook VALUES (10, '9780060935467',false); -- Mocking
INSERT INTO PhysicalBook VALUES (11, '9780064471107',false); -- MN
INSERT INTO PhysicalBook VALUES (12, '9780064471107',false);
INSERT INTO PhysicalBook VALUES (13, '9780064471107',false);
INSERT INTO PhysicalBook VALUES (14, '9781784703936', true); -- Homo
INSERT INTO PhysicalBook VALUES (15, '9781784703936',true);
INSERT INTO PhysicalBook VALUES (16, '9781784703936',false);
INSERT INTO PhysicalBook VALUES (17, '9781784703936',false);
INSERT INTO PhysicalBook VALUES (18, '9781473637498',true); --Fact
INSERT INTO PhysicalBook VALUES (19, '9781473637498',true);
INSERT INTO PhysicalBook VALUES (20, '9781473637498',false);
INSERT INTO PhysicalBook VALUES (21, '9781473637498',true);
INSERT INTO PhysicalBook VALUES (22, '9781473637498',false);
INSERT INTO PhysicalBook VALUES (23, '9780008471293',false); -- LOTR
INSERT INTO PhysicalBook VALUES (24, '9780008471293',false); 
INSERT INTO PhysicalBook VALUES (25, '9781529034523',false); -- Hitch
--Mio & Cirkus & HP6 & HP7 no copies

INSERT INTO Users VALUES (1, 'Farhan Syed', 'farhansy@kth.se','Barkarby');
INSERT INTO Users VALUES (2, 'Abhinav Sasikumar', 'abhsas@kth.se','Västerås');
INSERT INTO Users VALUES (3, 'Anna Yin', 'yinn@kth.se','KTH');

INSERT INTO Users VALUES (4, 'Kevin De Bruyne', 'bruyne@kth.se','Belgium street 7');
INSERT INTO Users VALUES (5, 'Sadio Mané', 'sadio@kth.se','Senegal street 10');
INSERT INTO Users VALUES (6, 'Virgil van Dijk', 'virgil@kth.se','Netherlands street 4');
INSERT INTO Users VALUES (7, 'Lionel Messi', 'messi@kth.se','Argentina street 10');
INSERT INTO Users VALUES (8, 'Cristiano Ronaldo', 'cr7@kth.se','Portugal street 7');
INSERT INTO Users VALUES (9, 'Mohammed Salah', 'salah@kth.se','Egypt steet 10');
INSERT INTO Users VALUES (10, 'N''golo Kanté', 'kante@kth.se','France street 13');
INSERT INTO Users VALUES (11, 'Alexander Isak', 'alisak@kth.se','Sweden street 11');
INSERT INTO Users VALUES (12, 'Bukayo Saka', 'busaka@kth.se','England street 17');
INSERT INTO Users VALUES (13, 'Son Heung-min', 'heungson@kth.se','South Korea street 7');

INSERT INTO Administrator VALUES (1, '0730329482', 'EECS');
INSERT INTO Administrator VALUES (2, '0793828429', 'EECS');
INSERT INTO Administrator VALUES (3, '0748395729', 'ITM');

INSERT INTO Student VALUES (4, 'Architecture');
INSERT INTO Student VALUES (5, 'Biotechnology');
INSERT INTO Student VALUES (6, 'Computer Science');
INSERT INTO Student VALUES (7, 'Design and Product Development');
INSERT INTO Student VALUES (8, 'Electrical Engineering');
INSERT INTO Student VALUES (9, 'Industrial Engineering and Management');
INSERT INTO Student VALUES (10, 'Information Technology');
INSERT INTO Student VALUES (11, 'Engineering Physics');
INSERT INTO Student VALUES (12, 'Engineering Mathematics');
INSERT INTO Student VALUES (13, 'Mechanical engineering');

INSERT INTO Loan VALUES (1,9,9,'2022-11-01','2022-11-08', '2022-11-05');        /* Returned */
INSERT INTO Loan VALUES (2,10,10,'2022-11-02','2022-11-09', '2022-11-09');
INSERT INTO Loan VALUES (3,11,11,'2022-11-03','2022-11-10', '2022-11-04');
INSERT INTO Loan VALUES (4,12,12,'2022-11-04','2022-11-11', '2022-11-07');
INSERT INTO Loan VALUES (5,13,13,'2022-11-05','2022-11-12', '2022-11-09');

INSERT INTO Loan VALUES (6,4,4,'2022-11-01','2022-12-08', NULL);                /* Not returned*/
INSERT INTO Loan VALUES (7,5,5,'2022-11-01','2022-12-08', NULL);
INSERT INTO Loan VALUES (8,6,6,'2022-11-02','2022-12-10', NULL);
INSERT INTO Loan VALUES (9,7,7,'2022-11-02','2022-12-10', NULL);
INSERT INTO Loan VALUES (10,8,8,'2022-11-03','2022-12-11', NULL);
INSERT INTO Loan VALUES (11,9,10,'2022-10-02','2022-10-09', '2022-10-09');

INSERT INTO Loan VALUES (12,4,4,'2022-11-01','2022-12-08', NULL);
INSERT INTO Loan VALUES (13,4,4,'2022-11-01','2022-12-08', NULL);
INSERT INTO Loan VALUES (14,4,4,'2022-11-01','2022-12-08', NULL);

INSERT INTO Loan VALUES (15,5,5,'2015-11-01','2015-11-08', '2015-11-02');
INSERT INTO Loan VALUES (17,5,5,'2016-11-01','2016-11-08', '2016-11-02');
INSERT INTO Loan VALUES (16,5,6,'2017-11-02','2017-11-10', '2017-11-02');

INSERT INTO Fines VALUES (6,60);
INSERT INTO Fines VALUES (12,60);
INSERT INTO Fines VALUES (13,60);
INSERT INTO Fines VALUES (14,60);

INSERT INTO Fines VALUES (7,50);
INSERT INTO Fines VALUES (8,10);
INSERT INTO Fines VALUES (9,1);
INSERT INTO Fines VALUES (10,100000000);

/* Queries:*/

SELECT full_name AS name FROM Users;

SELECT title, genre FROM (book JOIN BookGenres ON BookGenres.isbn=Book.isbn) WHERE genre = 'Fantasy' ORDER BY title ASC;

SELECT COUNT(borrowing_ID) FROM Loan WHERE Loan.date_of_return IS NULL;

SELECT title, COUNT(physical_ID) 
    FROM (PhysicalBook RIGHT JOIN Book ON PhysicalBook.isbn = Book.isbn)
 GROUP BY title;
 
SELECT round(avg(x),2) AS average_books_per_user 
    FROM (SELECT COUNT(user_ID) AS x FROM Loan WHERE date_of_borrowing >= '2022-01-01' GROUP BY user_ID) AS n;


/* P+ (Sum of the 100 first prime numbers)
*/

WITH recursive t(n) AS (
  SELECT 2
  UNION ALL
  SELECT n+1 FROM t WHERE n<100
)
SELECT SUM (n) AS sum FROM (SELECT candidate_prime.n   /*n = prime numbers, t = 1-100 */
FROM t AS candidate_prime LEFT JOIN t AS divisor ON divisor.n <= sqrt(candidate_prime.n)                    
GROUP BY candidate_prime.n
HAVING candidate_prime.n=2 OR candidate_prime.n=3 OR MIN(candidate_prime.n % divisor.n) > 0
ORDER BY candidate_prime.n ASC) AS n;
  /* MIN because all remainders should be 
larger than 0 which implies that all remainders are not 0 */

